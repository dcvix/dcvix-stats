name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Fyne build dependencies
        run: >-
          sudo apt-get update &&
          sudo apt-get -y install
          bc
          gcc
          libgl1-mesa-dev
          libwayland-dev
          libx11-dev
          libxkbcommon-dev
          xorg-dev
          xvfb
          language-pack-en

      - name: Downloads go modules dependencies
        run: go mod tidy

      - name: Build Linux binary
        run: make update-toml; make build-linux

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-linux
          path: dist/dcvix-stats-v${{ env.VERSION }}-linux-amd64.tar.gz

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          $version = $env:GITHUB_REF_NAME -replace '^v',''
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install 7zip
        run: choco install --no-progress 7zip.commandline

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install support for windows resources
        run: go install github.com/tc-hib/go-winres@latest

      - name: Downloads go modules dependencies
        run: go mod tidy

      - name: Build Windows binary
        run: make build-windows

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-windows
          path: dist/dcvix-stats-v${{ env.VERSION }}-windows-amd64.zip

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets-linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets-windows

      - name: Generate checksums
        run: |
          sha256sum *.tar.gz *.zip > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.zip
            checksums.txt
          name: dcvix-stats ${{ env.VERSION }}
          body: |
            ## dcvix Stats ${{ env.VERSION }}

            ### Packages
            - Linux binary
            - Windows binary
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
